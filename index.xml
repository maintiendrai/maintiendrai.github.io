<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>黑暗民谣</title>
    <link>http://maintiendrai.github.io/</link>
    <description>Recent content on 黑暗民谣</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sat, 19 Jan 2019 16:07:09 +0800</lastBuildDate>
    
	<atom:link href="http://maintiendrai.github.io/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Rasa NLU天气Bot实现</title>
      <link>http://maintiendrai.github.io/post/2019-01-19-weather-bot/</link>
      <pubDate>Sat, 19 Jan 2019 16:07:09 +0800</pubDate>
      
      <guid>http://maintiendrai.github.io/post/2019-01-19-weather-bot/</guid>
      <description>纯粹是给自己复习看系列 Dependency install pip install -r requirements.txt python -m spacy download en npm i -g rasa-nlu-trainer  Training a Rasa NLU model 手动编辑 mkdir data cd data vi data.json  在线编辑 rasa-nlu-trainer =&amp;gt; localhost:52526 cd .. modify config_spacy.json nlu_model.py
python nlu_model.py =&amp;gt; training
python nlu_model.py =&amp;gt; result
Training a Rasa Core dialogue manangement model create weather_domain.yml
modify actions.py
cd data
modify stroies.md
on line training session cd .. modify train_init.</description>
    </item>
    
    <item>
      <title>Objective-C转向Swift若干tips</title>
      <link>http://maintiendrai.github.io/post/2016-07-26-objective-c%E8%BD%AC%E5%90%91swift%E8%8B%A5%E5%B9%B2tips/</link>
      <pubDate>Tue, 26 Jul 2016 12:09:09 +0800</pubDate>
      
      <guid>http://maintiendrai.github.io/post/2016-07-26-objective-c%E8%BD%AC%E5%90%91swift%E8%8B%A5%E5%B9%B2tips/</guid>
      <description>Objective-C转向Swift若干tips  Swift 的 playground 就像是一个可交互的文档，它是用来练手学swift的，写一句代码出一行结果（右侧），可以实时查看代码结果，是学习swift语言的利器
 不分头文件和实现文件，而是集合到.swift文件
 swift中无需使用代码分隔符，以行作为代码分隔，如一行内有多行代码，则各行代码之间同样需使用分号;分隔
 swift没有main函数，其代码是至上而下运行，第一行代码即为程序入口
 类型对象化（类似于java） Int、Float、Double、Bool、Character
 let 定义常量； len pi = 3.14
 var hello :NSString ?
 var 定义变量var hello :NSString = @“test”
  指定变量类型  ? 表示optional，即该变量可能为nil; 调用时必须加? 如 hello?.length
 ! 表示该变量一定不为nil，否则crash
 @”hello”不存在了,变回了”hello” 如var hello :NSString = &amp;ldquo;hello&amp;rdquo;
  可以使用+来拼接字符串 &amp;ldquo;hello&amp;rdquo;+&amp;ldquo;world&amp;rdquo;
 使用()可以在字符串插入变量 let lang = &amp;ldquo;swift&amp;rdquo;; &amp;ldquo;hello \(lang) world&amp;rdquo;
 class 定义类</description>
    </item>
    
    <item>
      <title>我的Git工作流</title>
      <link>http://maintiendrai.github.io/post/2015-07-03-%E6%88%91%E7%9A%84git%E5%B7%A5%E4%BD%9C%E6%B5%81/</link>
      <pubDate>Fri, 03 Jul 2015 12:09:09 +0800</pubDate>
      
      <guid>http://maintiendrai.github.io/post/2015-07-03-%E6%88%91%E7%9A%84git%E5%B7%A5%E4%BD%9C%E6%B5%81/</guid>
      <description>Git data stores • workspace - 对应本地目录，当有文件修改，则最新体现在workspace变化
• index - 是索引文件，指定commit要提交的内容
• commit - 提交到本地仓库
• HEAD - 表示本地最新的一次commit
• git diff - 比较workspace与index
• git diff -cached - 比较index与commit
• git diff HEAD - 比较workspace与commit
Git 工作流 master 用于发布
develop 用户主要开发点
新功能hotfix，开个功能名的分支，这个分支不 push，写好后:
(hotfix) $ git add .
(hotfix) $ git commit -m &amp;quot;...&amp;quot;
(hotfix) $ git checkout develop
(develop) $ git pull origin develop
(develop) $ git merge hotfix</description>
    </item>
    
    <item>
      <title>折腾路由器的一天</title>
      <link>http://maintiendrai.github.io/post/2015-05-24-%E8%B7%AF%E7%94%B1%E5%99%A8%E6%8A%98%E8%85%BE/</link>
      <pubDate>Sun, 24 May 2015 12:09:09 +0800</pubDate>
      
      <guid>http://maintiendrai.github.io/post/2015-05-24-%E8%B7%AF%E7%94%B1%E5%99%A8%E6%8A%98%E8%85%BE/</guid>
      <description>周末折腾了两天路由器。一个是自己买的netgear，一个是公司的测试部买的极路由2。项目组的人叫我帮忙把极路由给刷成openwrt 说起极路由，用着挺不爽的，子网下的bonjour都搜不到。估计是端口被限制，sip呼叫也各种不靠谱，估计也是端口被限制。
记下流水账～
#极路由 ##降级 我手头上的极路由2是9010版本。我发现极路由很鸡贼啊，不能直接刷其它系统的firmware.bin文件。我操～
搜了一下，可以降级到9006
我试了很多个rom，都不能成功。
后面我是用这个rom降级的
极2 0.9006.2.6020s版固件
###刷机步骤：
1：拔掉路由电源
2：用网线将极路由黄色的 LAN 口与电脑网口相连
3：将电脑本地连接的 IP 设置为ip：192.168.1.88。子网掩码：255.255.255.0。网关空着，不用填写，不知道在哪里设置的，请看这里：win7win8：http://jingyan.baidu.com/article/22fe7ced18876f3003617f5e.html XP：http://jingyan.baidu.com/article/77b8dc7fc0f5786174eab6af.html
4：根据操作系统，32位运行tftpd32, 64位运行tftpd64
5：用尖锐物按住极路由 RESET 不放，再给极路由插上电源
6：等待电脑上 tftpd 出现传输 recovery.bin 进度条完成后，松开 RESET（进度条很快的，几秒钟）
7：极路由面板灯进入跑马灯状态，所有灯轮流闪，跑完后，系统自动重启，刷机完成
8：改电脑本地连接属性的ip为自动获取，访问http://192.168.199.1路由管理界面 密码：admin
然后由于极路由它很鸡贼，还要去root它才能刷第三方的固件
##搜狐插件大法：极路由Root
极路由云插件“搜狐视频远程下载”使用了开源下载工具aria2，由于aria2主程序aria2c占用空间较大，因此被安装到了SD卡的usr/bin目录。aria2c在每次开机时运行，因此给极客们一个ROOT机会。ROOT的思路是：用自己的脚本文件替换aria2c文件，在脚本文件中加入启用dropber服务的指令。具体方法如下：
1、安装云插件“搜狐视频远程下载”，然后验证aria2c是否安装运行，验证方法：在PC机上运行下面的命令：
telnet 192.168.199.1 6800
如果能连接，说明aria2c已经运行。
2、关掉路由器，拔出SD卡，将SD卡插入SD读卡器。 (由于极路由系统是基于openwrt再封一层，openwrt是linux的，所以SD卡是ext4的，只能mount在linux的机器上。mac os也不支持，后面的操作是在ubuntu下完成的)
3、Linux操作系统能自动加载USB SD读卡器驱动，一般情况下设备名为/dev/sdb，或者用dmesg命令查询驱动程序日志，从中发现设备名。SD卡有2个分区，第1个是大小为1GB的luks加密分区，第2个是正常的ext4分区。9006版固件的aria2c文件在第2分区，因此需要mount该分区，命令为：
mount -t ext4 /dev/sdb2 /mnt
4、aria2c文件在/mnt/usr/bin目录中，先换名，然后替换。
cd /mnt/usb/bin
mv aria2c aria2c.orig
然后用vi命令创建文件aria2c，内容为：
#!/bin/sh if [ &amp;quot;$1&amp;quot; = &amp;quot;ok&amp;quot; ]; then rm -f /tmp/data/usr/bin/aria2c mv /tmp/data/usr/bin/aria2c.</description>
    </item>
    
    <item>
      <title>SVN迁移到Git的过程(svn2git)</title>
      <link>http://maintiendrai.github.io/post/2015-05-12-svn-%E5%AE%8C%E7%BE%8E%E8%BF%81%E7%A7%BB%E8%87%B3-git/</link>
      <pubDate>Tue, 12 May 2015 12:09:09 +0800</pubDate>
      
      <guid>http://maintiendrai.github.io/post/2015-05-12-svn-%E5%AE%8C%E7%BE%8E%E8%BF%81%E7%A7%BB%E8%87%B3-git/</guid>
      <description>##SVN完美迁移到Git
###前言 SVN迁移到GIT，一般我们想到的是《Pro Git》上的git svn命令 它可以把SVN迁移到GIT，它可以支持双向提交，即提交到GIT的同时提交到SVN。但是这个可能是不完美的，因为SVN跟GIT毕竟不是一个东西，组织结构也不一样 github上面推荐svn2git工具。支持完美GIT，但是对SVN的双向commit有所欠缺
###Installation Make sure you have git, git-svn, and ruby installed. svn2git is a ruby wrapper around git&amp;rsquo;s native SVN support through git-svn. It is possible to have git installed without git-svn installed, so please do verify that you can run $ git svn successfully. For a Debian-based system, the installation of the prerequisites would look like:
$ sudo apt-get install git-core git-svn ruby  Once you have the necessary software on your system, you can install svn2git through rubygems, which will add the svn2git command to your PATH.</description>
    </item>
    
    <item>
      <title>Vim写博客同步到evernote</title>
      <link>http://maintiendrai.github.io/post/2014-10-09-vim-geeknode/</link>
      <pubDate>Thu, 09 Oct 2014 12:09:09 +0800</pubDate>
      
      <guid>http://maintiendrai.github.io/post/2014-10-09-vim-geeknode/</guid>
      <description>通过VIM写博客通过geeknote同步到evernote
 Vim/vim-markdown/markdown preview plus &amp;lt; -&amp;gt; GeekNote -&amp;gt; Evernote _ 不需要任何第三方服务器的方案，就是使用Vim编写markdown。 给Vim配上markdown着色的插件vim-markdown。
mac os下默认的python是narrow build path
python 解决 narrow build path 导致的 ValueError: unichr() arg not in range(0x10000) (narrow Python build)
./configure --enable-unicode=ucs4 --prefix=/usr  给chrome装上实时查看markdown效果的插件markdown preview plus，这插件非常好用！特 别是开启了“Enable auto-reload”之后，每次用Vim保存文件时都能马上刷新。 然后用类似上一个方案的用法使用GeekNote，生成富文本同步到Evernote。 为了更方便的使用GeekNote，可以在Dropbox里新建一个evernotebank的文件夹，然后按照 你想同步的notebook的名字新建同名文件夹； 比如我在evernotebank里建立blog.chetui.org的文件夹，并在该目录下建立如下脚本，命 名为sync：
#!/bin/bash allFiles() { for file in $1/* do if [ -d $file ]; then echo $file /Users/lilkr/Tools/hack/geeknote/geeknote/gnsync.py --path $file --mask &amp;quot;*.md&amp;quot; --format markdown --logpath log--notebook &amp;quot;goandfight&amp;quot; allFiles $file fi done } testdir=.</description>
    </item>
    
    <item>
      <title>Wireshark分析SIP交换中的SDP及RTP的工作过程</title>
      <link>http://maintiendrai.github.io/post/2014-09-20-wireshark-sdp-rtp/</link>
      <pubDate>Sat, 20 Sep 2014 12:09:09 +0800</pubDate>
      
      <guid>http://maintiendrai.github.io/post/2014-09-20-wireshark-sdp-rtp/</guid>
      <description>一、SIP协议告知对方UDP端口号，协商媒体类型 0.0 整个通信过程分析图
1.1 主叫方发给被叫方的INVITE请求
1.2 被叫方回给主叫方的180消息
二、RTP媒体流 2.1 主叫方发给被叫方的一个RTP包，UDP端口号是SDP协商好的，包的序列号是0
第二个RTP包，包的序列号是0，其它一样
三、RTCP包 3.1 每发完一批RTP包的时候，就发一个RTCP包，告诉接收方我刚才发了多少RTP包，多少个字节
i</description>
    </item>
    
    <item>
      <title>Wireshark分析SIP协议</title>
      <link>http://maintiendrai.github.io/post/2014-09-19-wireshark-sip/</link>
      <pubDate>Fri, 19 Sep 2014 12:09:09 +0800</pubDate>
      
      <guid>http://maintiendrai.github.io/post/2014-09-19-wireshark-sip/</guid>
      <description>Overview SIP 是VOIP目前非常流行的一种协议。有关协议的详细原理参照相关文档。
SIP 组件 1.User Agent UA 是 SIP 的基本组件，可分为 UAC（User Agent Client）和 UAS（User Agent Server）。 发起呼叫的为 UAC（X-Lite:iP 192.168.61.221），接收呼叫的为 UAS（本文手机端选用LinPhone:iP）。很多设备都可做 UA，如 IP 电话、PC、路由器等。 2.SIP server SIP server（本文选用Asterisk）实现了Proxy Server（代理服务器）、Redirect Server（重定向服务器）、注册服务器的功能（Registrar Server）、Location Server、Back-to-back user agent (B2BUA) 、Presence Server。
本文通过wireshark抓包分析SIP user agent（用户代理客户机，uac）与SIP serve之间的交互过程，在拨打SIP电话之前，先需要搭建相应的环境：
Wireshark分析Account注册过程 设置过滤条件，只catch从UAC（ip.addr == 192.168.61.221 &amp;amp;&amp;amp; sip）发出或接收的数据包。 1.首先UAC向SIP serve(112.124.57.23)发出REGISTER信息
REGISTER:UA client 使用此 message 向 server 注册以标明自己的位置。  SIP电话的格式是：
sip:username@UAC_IP sip:username@UAC_IP_DNS （如果网络中有DNS服务器，并配置了UAC_IP对应的域名UAC_IP_DNS ）  如上图所示，sip电话格式为： sip:100@112.124.57.23 或 sip:100@lilkr（配置了DNS服务器） 2.sip server请求要求身份验证。 3.</description>
    </item>
    
    <item>
      <title>群晖DSM上安装Git Server</title>
      <link>http://maintiendrai.github.io/post/2014-07-01-syn-dsm-git-server/</link>
      <pubDate>Tue, 01 Jul 2014 12:09:09 +0800</pubDate>
      
      <guid>http://maintiendrai.github.io/post/2014-07-01-syn-dsm-git-server/</guid>
      <description>给WD、TOSHIBA开发的无线硬盘APP，也给自己公司开发的WiDiSK无线硬盘APP。都是基于WebDAV的。想知道别人的NAS的APP做的怎么样本来想用旧台式机装黑群晖，但是考虑到功率的问题，我还是选择了群晖的 nas 解决方案以及附带的 DSM 系统。并在手机上装APP进行体验。
群晖 nas 的系统 DSM 是基于 Linux 的，因此你也可以把 nas 看作一台小型的 Linux 服务器。DSM 提供了很多实用的套件供你开发 nas 的潜力，包括 PHP、Python、MySQL、Wordpress 等，同时也支持 Git 服务器。
今天这篇文章就讲讲如何使用群晖 nas 搭建私有 git 服务器。
###为什么要搭建私有 git 服务器
这个不多说了，不想搭就不用来看这文章了 以前用gitlab在ubuntu上搭过git服务器。
###nas 搭建 git 服务器
 进入 DSM 系统的『套件中心』，安装 Git Server
 创建一名用户，名为『git』（名称随意，但是叫 git 比较好，该用户仅有 git shell 的执行权限，除此之外无任何权限）在用户界面创建新用户git，没有特殊权限，放到users组即可
 在『控制面板』- 『终端机』中开启 SSH 登录功能
 用ssh的root用户登录到群晖
vi /etc/passwd 文件 修改git用户的home目录
/var/services/homes/git to /volume1/git  修改登录后的 shell
/sbin/nologin to /bin/ash  修改git用户home目录的权限为777</description>
    </item>
    
    <item>
      <title>Home Remedies for Sinus Headache Cure</title>
      <link>http://maintiendrai.github.io/post/2014-04-22-sinus-headache-cure/</link>
      <pubDate>Tue, 22 Apr 2014 12:09:09 +0800</pubDate>
      
      <guid>http://maintiendrai.github.io/post/2014-04-22-sinus-headache-cure/</guid>
      <description>被蝶窦炎困扰11年了，蝶窦炎导致头痛真是让人。网上找了篇文章，貌似还挺靠谱的。分享给与我一样受到鼻窦炎困扰的朋友，文章的题目是：治疗窦性头痛的家庭秘方
http://www.buzzle.com/articles/sinus-headache-home-remedies.html
Warm Water The simplest of home remedies is to drink a lot of warm water. I will suggest, whenever you drink water, drink only warm water. If possible, you can drink hot water as well. It will help in minimizing the symptoms sooner.
温水 最简单的偏方是喝大量的热水。 我建议,每当你喝水,只喝温水。 如果可能的话,你可以喝热水。 这将有助于减少症状。
Vitamin C In case of a common cold or sinusitis, doctors always advice to increase the consumption of food rich in Vitamin C.</description>
    </item>
    
    <item>
      <title>问题分析</title>
      <link>http://maintiendrai.github.io/post/2014-01-20-ability-enhancement/</link>
      <pubDate>Mon, 20 Jan 2014 12:09:09 +0800</pubDate>
      
      <guid>http://maintiendrai.github.io/post/2014-01-20-ability-enhancement/</guid>
      <description> 问题:提升问题分析解决的能力，我这边根据自己的情况总结几点，可做参考：
 问题定位:
 1.遇到问题可以自己稍微考虑下或查找官方API，而不是直接去Google；有些问题的解决有时候是因为API没研究透，没站在开发人员设计接口的角度上面考虑他们接口的设计以及属性的设置，一个问题解决出来后会想到头文件的有些接口设计是有它道理的。还是要多站在提供接口的开发者的高度上面，才能更好地解决问题。还有就是自己开发库的时候，没能更清晰地想好设计好所需要的类跟接口，只有有更清晰的想法，才能设计出更精简的库，而不是拿别人的库文件来改，感觉总是不够精简，有很多冗余的东西。 2.遇到问题先理一理逻辑，从逻辑上考虑是否会发生该情况，而不是仅仅根据几个打印就断定原因； 3.解决问题优先从本质上入手； 4.平时要注重提升下基础知识的积累，多写代码，对代码适当重构，多积累，多看书，多自己实现一些底层的东西，一个好的基础将有助于更快地分析解决问题； 5.实在分析不出原因，可以Google，找出解决方案后，自己也应该稍加考虑，并将此解决方案转化为自己的经验库； 6.多看书  </description>
    </item>
    
    <item>
      <title>SVN迁移到Git的过程</title>
      <link>http://maintiendrai.github.io/post/2013-10-12-git-svn/</link>
      <pubDate>Sat, 12 Oct 2013 12:09:09 +0800</pubDate>
      
      <guid>http://maintiendrai.github.io/post/2013-10-12-git-svn/</guid>
      <description>###迁移SVN到git 关于在VCS中SVN和Git之间的迁移（Clone）这个部分网上已经有大批的文章介绍，而且都非常不错，能够满足我们的常见的需求，这里介绍的是我自己整理的一些技巧和使用中出现的一些问题和疑问。 阅读本篇文章，请先有一些Git和SVN的使用经验。
首先需要读取这个软件创建时的版本号
svn log https://192.168.60.200/svn/wifidisk|tail -4|head -1  得到了如下信息，获得一个版本号 1
r1 | plugin-master | 2010-12-03 20:12:29 +0800 (五, 03 12 2010) | 1 line  开始clone代码
git svn clone https://192.168.60.200/svn/wifidisk -s r1:HEAD wifidisk  注： -s 参数是表面使用的是svn标准命名方法，即 trunk，tags，branches，这个参数有时很重要，建议使用，命令后面还可以加个文件夹名字作为clone后的目录，如果没有默认是当前路径。 git svn fetch 这个步骤，可能碰到只想从某个版本开始进行fetch，那么请需要 –r 参数。
注： 1 是你想要从这个版本开始fetch，如何查看这个版本号，你可以使用 svn 命令（windows下需要安装Subversion Client，e.g. sliksvn），简单使用就是 svn log svn_url ,这个时候，你可能看到整屏在刷新，没关系，看到log就行。当然更简单的就是使用TortoiseSVN-&amp;gt; Show log。
到这步的时候，本地已经clone了SVN仓库，现在需要的就是提交到远程了。首先，关联github远程仓库，如下：
git remote add origin git@192.168.60.151:lilkr/wifidisk.git git push -u origin master  ###导入tag跟branch</description>
    </item>
    
    <item>
      <title>Hello</title>
      <link>http://maintiendrai.github.io/post/2013-09-25-hello/</link>
      <pubDate>Wed, 25 Sep 2013 12:09:09 +0800</pubDate>
      
      <guid>http://maintiendrai.github.io/post/2013-09-25-hello/</guid>
      <description>Hello</description>
    </item>
    
    <item>
      <title>Hello</title>
      <link>http://maintiendrai.github.io/post/2018-09-25-hello-copy/</link>
      <pubDate>Wed, 25 Sep 2013 12:09:09 +0800</pubDate>
      
      <guid>http://maintiendrai.github.io/post/2018-09-25-hello-copy/</guid>
      <description>Hello</description>
    </item>
    
    <item>
      <title>Hosting wordpress in the amazon ec2 cloud with linux using mac</title>
      <link>http://maintiendrai.github.io/post/2009-09-25-aws-wordpress/</link>
      <pubDate>Fri, 25 Sep 2009 12:09:09 +0800</pubDate>
      
      <guid>http://maintiendrai.github.io/post/2009-09-25-aws-wordpress/</guid>
      <description>朋友告诉我亚马逊有个免费一年的Linux主机，AWS，速度还不错，叫我试一下。只不过要先支付1美金。感觉跟VPS差不多。那我就试一下。在天朝，80端口被电信各个运营商给限了，自己有台服务器都要先备案，才能正常使用80端口。不折腾了，先这样吧。
做一件事情之前，总是要先找文档，看了亚马逊的文档，又不是母语，想快点，就找到了一个中文的BLOG，我就很信任地大干了起来。
http://quanzhibaba.com/archives/315   STEP1没啥问题
 STEP2也没什么问题。我也选择了最基本的选项：“Basic 32-bit Amazon Linux AMI 1.0.” （话说在COMMUNITY AMI这地方点下去，是能选择UBUNTU的）嗯，但是我毕竟还是选了AMI的，貌似是REDHAT的系统。
 STEP3安装编译PHP的时候，作者是这么做的：sudo yum install php。编译少了其它的一些项，给我后续的工作制造了不少的麻烦，正确应该这样 yum install php libmcrypt libmcrypt-devel php-mcrypt php-mbstring 。
 STEP4这里我特地分段了， 作者居然把mysql托管到了RDS，其实数据库是不用托管的，直接在AMI里面安装就可以了，我照着作者的方法做了，结果托管后，按流量收费，被扣了4美元，血琳琳的教训啊。
  接着看比较完整的文档吧。这文章写得比较严谨。
http://calebogden.com/wordpress-on-linux-in-the-amazon-cloud-with-mac/  Thanks to @calebogden ， 当然还有@quanzhibaba。</description>
    </item>
    
  </channel>
</rss>