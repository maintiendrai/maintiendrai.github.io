<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Tools on My New Hugo Site</title>
    <link>http://maintiendrai.github.io/categories/tools/</link>
    <description>Recent content in Tools on My New Hugo Site</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Fri, 03 Jul 2015 12:09:09 +0800</lastBuildDate>
    <atom:link href="http://maintiendrai.github.io/categories/tools/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>我的Git工作流</title>
      <link>http://maintiendrai.github.io/post/2015-07-03-%E6%88%91%E7%9A%84git%E5%B7%A5%E4%BD%9C%E6%B5%81/</link>
      <pubDate>Fri, 03 Jul 2015 12:09:09 +0800</pubDate>
      
      <guid>http://maintiendrai.github.io/post/2015-07-03-%E6%88%91%E7%9A%84git%E5%B7%A5%E4%BD%9C%E6%B5%81/</guid>
      <description>

&lt;h1 id=&#34;git-data-stores&#34;&gt;Git data stores&lt;/h1&gt;

&lt;p&gt;&lt;img src=&#34;http://ww2.sinaimg.cn/large/637573b1gw1etsbgs5we2j20dd0cnmyl.jpg&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;•   workspace - 对应本地目录，当有文件修改，则最新体现在workspace变化&lt;/p&gt;

&lt;p&gt;•   index - 是索引文件，指定commit要提交的内容&lt;/p&gt;

&lt;p&gt;•   commit - 提交到本地仓库&lt;/p&gt;

&lt;p&gt;•   HEAD - 表示本地最新的一次commit&lt;/p&gt;

&lt;p&gt;•   git diff - 比较workspace与index&lt;/p&gt;

&lt;p&gt;•   git diff -cached - 比较index与commit&lt;/p&gt;

&lt;p&gt;•   git diff HEAD - 比较workspace与commit&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://ww2.sinaimg.cn/large/637573b1gw1etsbhk7uycj20e50huwgq.jpg&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;h1 id=&#34;git-工作流&#34;&gt;Git 工作流&lt;/h1&gt;

&lt;p&gt;master 用于发布&lt;br /&gt;
develop 用户主要开发点&lt;br /&gt;
新功能hotfix，开个功能名的分支，这个分支不 push，写好后:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;(hotfix) $ git add .&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;(hotfix) $ git commit -m &amp;quot;...&amp;quot;&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;(hotfix) $ git checkout develop&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;(develop) $ git pull origin develop&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;(develop) $ git merge hotfix &lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;(develop) $ git push origin develop&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;自己合并到 develop 分支，合并只是简单的 merge 就好了&lt;/p&gt;

&lt;h1 id=&#34;git-rebase&#34;&gt;git rebase&lt;/h1&gt;

&lt;p&gt;两个人工作在一个特性分支上，push 的时候出现冲突，那么要用
git pull
还是
git pull &amp;ndash;rebase
呢？&lt;/p&gt;

&lt;p&gt;以前我是用第一种方式，但是后来偏好
 pull &amp;ndash;rebase，
因为这样可以得到一个线性的特性分支，虽然丢失了并行开发的信息，而且 commit 较多的话解决冲突会变麻烦（解决方案是频繁 rebase &amp;amp;&amp;amp; push）。
保持线性的特性分支，查阅很多资料都只看见“管理者的喜好”这样的描述，而没有描述优缺点。
多人协作，所以需要经常push到代码库备份。而这两个人如果经常 pull 的话，就会出现很多
Merge branch &amp;lsquo;aaa&amp;rsquo; of git.xxx.xxx/xxx/xxx into aaa
这样的 merge commit，这时候就会发现这些merge动作其实没有必要，这些 commit 在审阅代码的时候很干扰。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://ihower.tw/blog/wp-content/uploads/2010/02/git-merge.jpg&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;总结了一下：
加上 rebase 的意思是，
1. 把本地 repo. 从上次 pull 之后的变更暂存起來
2. 回復到上次 pull 時的情況
3. 套用远端的变更
4. 最后再套用刚暂存下来的本地变更。
詳細說明可以參考 [](&lt;a href=&#34;http://gitready.com/advanced/2009/02/11/pull-with-rebase.html&#34;&gt;http://gitready.com/advanced/2009/02/11/pull-with-rebase.html&lt;/a&gt; &amp;ldquo;pull with rebase&amp;rdquo;)。&lt;/p&gt;

&lt;p&gt;用图说明下：&lt;/p&gt;

&lt;p&gt;还没合并前：
&lt;img src=&#34;http://gitbook.liuhui998.com/assets/images/figure/rebase1.png&#34; alt=&#34;&#34; /&gt;
用git merge合并：
&lt;img src=&#34;http://gitbook.liuhui998.com/assets/images/figure/rebase2.png&#34; alt=&#34;&#34; /&gt;
用git rebase合并：
&lt;img src=&#34;http://gitbook.liuhui998.com/assets/images/figure/rebase3.png&#34; alt=&#34;&#34; /&gt;
当&amp;rsquo;mywork&amp;rsquo;分支更新之后，它会指向这些新创建的提交(commit),而那些老的提交会被丢弃。 如果运行垃圾收集命令(pruning garbage collection), 这些被丢弃的提交就会删除.
&lt;img src=&#34;http://gitbook.liuhui998.com/assets/images/figure/rebase4.png&#34; alt=&#34;&#34; /&gt;
最后是：
现在我们可以看一下用合并(merge)和用rebase所产生的历史的区别：
&lt;img src=&#34;http://gitbook.liuhui998.com/assets/images/figure/rebase5.png&#34; alt=&#34;&#34; /&gt;
(rebase 时所谓的解决冲突，其实是直接修改你之前的变更內容，所以上图中变成 C5’ 跟 c6’ )&lt;/p&gt;

&lt;p&gt;在rebase的过程中，也许会出现冲突(conflict). 在这种情况，Git会停止rebase并会让你去解决 冲突；在解决完冲突后，用&amp;rdquo;git-add&amp;rdquo;命令去更新这些内容的索引(index), 然后，你无需执行 git-commit,只要执行:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;$ git rebase --continue&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;这样git会继续应用(apply)余下的补丁。
在任何时候，你可以用&amp;ndash;abort参数来终止rebase的行动，并且&amp;rdquo;mywork&amp;rdquo; 分支会回到rebase开始前的状态。&lt;/p&gt;

&lt;p&gt;&lt;code&gt;$ git rebase --abort&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;参考资料:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;a href=&#34;http://blog.osteele.com/posts/2008/05/my-git-workflow/#fn:1&#34;&gt;http://blog.osteele.com/posts/2008/05/my-git-workflow/#fn:1&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://gitbook.liuhui998.com/4_2.html&#34;&gt;http://gitbook.liuhui998.com/4_2.html&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://ihower.tw/blog/archives/3843&#34;&gt;https://ihower.tw/blog/archives/3843&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://getpocket.com/a/read/961298276&#34;&gt;https://getpocket.com/a/read/961298276&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.oschina.net/question/54371_59134&#34;&gt;http://www.oschina.net/question/54371_59134&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.nvie.com/posts/a-successful-git-branching-model/&#34;&gt;http://www.nvie.com/posts/a-successful-git-branching-model/&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
</description>
    </item>
    
    <item>
      <title>折腾路由器的一天</title>
      <link>http://maintiendrai.github.io/post/2015-05-24-%E8%B7%AF%E7%94%B1%E5%99%A8%E6%8A%98%E8%85%BE/</link>
      <pubDate>Sun, 24 May 2015 12:09:09 +0800</pubDate>
      
      <guid>http://maintiendrai.github.io/post/2015-05-24-%E8%B7%AF%E7%94%B1%E5%99%A8%E6%8A%98%E8%85%BE/</guid>
      <description>&lt;p&gt;周末折腾了两天路由器。一个是自己买的netgear，一个是公司的测试部买的极路由2。项目组的人叫我帮忙把极路由给刷成openwrt
说起极路由，用着挺不爽的，子网下的bonjour都搜不到。估计是端口被限制，sip呼叫也各种不靠谱，估计也是端口被限制。&lt;/p&gt;

&lt;p&gt;记下流水账～&lt;/p&gt;

&lt;p&gt;#极路由
##降级
我手头上的极路由2是9010版本。我发现极路由很鸡贼啊，不能直接刷其它系统的firmware.bin文件。我操～&lt;/p&gt;

&lt;p&gt;搜了一下，可以降级到9006&lt;/p&gt;

&lt;p&gt;我试了很多个rom，都不能成功。&lt;/p&gt;

&lt;p&gt;后面我是用这个rom降级的&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://ur.ikcd.net/HC5761-sysupgrade-20140911-3d5f030b.bin&#34;&gt;极2 0.9006.2.6020s版固件&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;###刷机步骤：&lt;/p&gt;

&lt;p&gt;1：拔掉路由电源&lt;/p&gt;

&lt;p&gt;2：用网线将极路由黄色的 LAN 口与电脑网口相连&lt;/p&gt;

&lt;p&gt;3：将电脑本地连接的 IP 设置为ip：192.168.1.88。子网掩码：255.255.255.0。网关空着，不用填写，不知道在哪里设置的，请看这里：win7win8：&lt;a href=&#34;http://jingyan.baidu.com/article/22fe7ced18876f3003617f5e.html&#34;&gt;http://jingyan.baidu.com/article/22fe7ced18876f3003617f5e.html&lt;/a&gt;  XP：&lt;a href=&#34;http://jingyan.baidu.com/article/77b8dc7fc0f5786174eab6af.html&#34;&gt;http://jingyan.baidu.com/article/77b8dc7fc0f5786174eab6af.html&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;4：根据操作系统，32位运行tftpd32, 64位运行tftpd64&lt;/p&gt;

&lt;p&gt;5：用尖锐物按住极路由 RESET 不放，再给极路由插上电源&lt;/p&gt;

&lt;p&gt;6：等待电脑上 tftpd 出现传输 recovery.bin 进度条完成后，松开 RESET（进度条很快的，几秒钟）&lt;/p&gt;

&lt;p&gt;7：极路由面板灯进入跑马灯状态，所有灯轮流闪，跑完后，系统自动重启，刷机完成&lt;/p&gt;

&lt;p&gt;8：改电脑本地连接属性的ip为自动获取，访问&lt;a href=&#34;http://192.168.199.1路由管理界面&#34;&gt;http://192.168.199.1路由管理界面&lt;/a&gt; 密码：admin&lt;/p&gt;

&lt;p&gt;然后由于极路由它很鸡贼，还要去root它才能刷第三方的固件&lt;/p&gt;

&lt;p&gt;##搜狐插件大法：极路由Root&lt;/p&gt;

&lt;p&gt;极路由云插件“搜狐视频远程下载”使用了开源下载工具aria2，由于aria2主程序aria2c占用空间较大，因此被安装到了SD卡的usr/bin目录。aria2c在每次开机时运行，因此给极客们一个ROOT机会。ROOT的思路是：用自己的脚本文件替换aria2c文件，在脚本文件中加入启用dropber服务的指令。具体方法如下：&lt;/p&gt;

&lt;p&gt;1、安装云插件“搜狐视频远程下载”，然后验证aria2c是否安装运行，验证方法：在PC机上运行下面的命令：&lt;/p&gt;

&lt;p&gt;telnet 192.168.199.1 6800&lt;/p&gt;

&lt;p&gt;如果能连接，说明aria2c已经运行。&lt;/p&gt;

&lt;p&gt;2、关掉路由器，拔出SD卡，将SD卡插入SD读卡器。
(由于极路由系统是基于openwrt再封一层，openwrt是linux的，所以SD卡是ext4的，只能mount在linux的机器上。mac os也不支持，后面的操作是在ubuntu下完成的)&lt;/p&gt;

&lt;p&gt;3、Linux操作系统能自动加载USB SD读卡器驱动，一般情况下设备名为/dev/sdb，或者用dmesg命令查询驱动程序日志，从中发现设备名。SD卡有2个分区，第1个是大小为1GB的luks加密分区，第2个是正常的ext4分区。9006版固件的aria2c文件在第2分区，因此需要mount该分区，命令为：&lt;/p&gt;

&lt;p&gt;mount -t ext4 /dev/sdb2 /mnt&lt;/p&gt;

&lt;p&gt;4、aria2c文件在/mnt/usr/bin目录中，先换名，然后替换。&lt;/p&gt;

&lt;p&gt;cd /mnt/usb/bin&lt;/p&gt;

&lt;p&gt;mv aria2c aria2c.orig&lt;/p&gt;

&lt;p&gt;然后用vi命令创建文件aria2c，内容为：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;#!/bin/sh

if [ &amp;quot;$1&amp;quot; = &amp;quot;ok&amp;quot; ]; then

         rm -f /tmp/data/usr/bin/aria2c 

         mv /tmp/data/usr/bin/aria2c.orig /tmp/data/usr/bin/aria2c 

         exit 0

fi

sed -i &#39;s/1022/22/g&#39; /etc/config/dropbear 

/etc/init.d/dropbear enable

/etc/init.d/dropbear start

/tmp/data/usr/bin/aria2c ok &amp;amp;&amp;gt;/dev/null 

exit 0
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;为新建的aria2c添加执行权限：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;chmod a+x aria2c
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;5、执行下面命令umount SD卡，拔出SD卡，插入路由器，路由器通电后即完成ROOT。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;cd / 

umount /mnt
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;6、SSH登录路由器后，执行下面的脚本进行ROOT保持，也就是下次自动升级固件时还能保持ROOT状态，脚本只需执行一次。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;echo &amp;quot;sed -i &#39;s/1022/22/g&#39; /etc/config/dropbear&amp;quot; &amp;gt;&amp;gt;/etc/rc.local 

echo &#39;/etc/init.d/dropbear enable&#39; &amp;gt;&amp;gt;/etc/rc.local

echo &#39;/etc/init.d/dropbear restart&#39; &amp;gt;&amp;gt;/etc/rc.local

echo &#39;/etc/rc.local&#39; &amp;gt;/lib/upgrade/keep.d/base 

echo &#39;/lib/upgrade/keep.d/base&#39; &amp;gt;&amp;gt;/lib/upgrade/keep.d/base 

echo &#39;/etc/sysupgrade.conf&#39; &amp;gt;&amp;gt;/lib/upgrade/keep.d/base 

echo &#39;/etc/rc.local&#39; &amp;gt;&amp;gt;/etc/sysupgrade.conf 

echo &#39;/lib/upgrade/keep.d/base&#39; &amp;gt;&amp;gt;/etc/sysupgrade.conf 

echo &#39;/etc/sysupgrade.conf&#39; &amp;gt;&amp;gt;/etc/sysupgrade.conf
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;##刷openwrt&lt;/p&gt;

&lt;p&gt;我刷的是&lt;a href=&#34;https://github.com/rssnsj/openwrt-hc5x61&#34;&gt;https://github.com/rssnsj/openwrt-hc5x61&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/rssnsj/openwrt-hc5761/releases/latest&#34;&gt;https://github.com/rssnsj/openwrt-hc5761/releases/latest&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;#Netgear&lt;/p&gt;

&lt;p&gt;还是刷netgear比较爽，没那么鸡贼。我拿到bin就直接刷ddwrt了&lt;/p&gt;

&lt;p&gt;###遇到的问题
1、The CGI script took too long to produce a response 报这个错
固件有问题&lt;/p&gt;

&lt;p&gt;2、在DD-WRT下，所有速率最高54M&lt;/p&gt;

&lt;p&gt;此问题，在我刷回原厂ROM的时候，才得到答案。我安全设定方式选择TKIP兼容模式，提示我此模式下最大支持54M，而此前我并不知道。改成支持AES，速度即可提升了。&lt;/p&gt;

&lt;p&gt;3、科学上网的方案
DDWRT+autoddvpn+DNSMasq(Tomato+TomatoAutoVPN+DNSMasq是更好的选择，但是要刷Tomato,以后再试)&lt;/p&gt;

&lt;p&gt;4、学到的命令
nvram set http_lanport=12345
nvram commit
重启，12345就是你的端口&lt;/p&gt;

&lt;p&gt;参考资料&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;a href=&#34;http://www.iptvfans.cn/wiki/index.php/%E6%9E%81%E8%B7%AF%E7%94%B1&#34;&gt;http://www.iptvfans.cn/wiki/index.php/%E6%9E%81%E8%B7%AF%E7%94%B1&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://hiwifiroot.lofter.com/post/1d0319c1_6596c99&#34;&gt;http://hiwifiroot.lofter.com/post/1d0319c1_6596c99&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://smileawei.com/hiwifi-1s-9006-root/&#34;&gt;http://smileawei.com/hiwifi-1s-9006-root/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://ju.outofmemory.cn/entry/117066&#34;&gt;http://ju.outofmemory.cn/entry/117066&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/rssnsj/openwrt-hc5x61&#34;&gt;https://github.com/rssnsj/openwrt-hc5x61&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://linux.52zhe.info/read.php/286.htm?utm_source=tuicool&#34;&gt;http://linux.52zhe.info/read.php/286.htm?utm_source=tuicool&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://ruby-china.org/topics/15250&#34;&gt;https://ruby-china.org/topics/15250&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
</description>
    </item>
    
    <item>
      <title>SVN迁移到Git的过程(svn2git)</title>
      <link>http://maintiendrai.github.io/post/2015-05-12-svn-%E5%AE%8C%E7%BE%8E%E8%BF%81%E7%A7%BB%E8%87%B3-git/</link>
      <pubDate>Tue, 12 May 2015 12:09:09 +0800</pubDate>
      
      <guid>http://maintiendrai.github.io/post/2015-05-12-svn-%E5%AE%8C%E7%BE%8E%E8%BF%81%E7%A7%BB%E8%87%B3-git/</guid>
      <description>&lt;p&gt;##SVN完美迁移到Git&lt;/p&gt;

&lt;p&gt;###前言
SVN迁移到GIT，一般我们想到的是《Pro Git》上的git svn命令 它可以把SVN迁移到GIT，它可以支持双向提交，即提交到GIT的同时提交到SVN。但是这个可能是不完美的，因为SVN跟GIT毕竟不是一个东西，组织结构也不一样 github上面推荐svn2git工具。支持完美GIT，但是对SVN的双向commit有所欠缺&lt;/p&gt;

&lt;p&gt;###Installation
Make sure you have git, git-svn, and ruby installed. svn2git is a ruby wrapper around git&amp;rsquo;s native SVN support through git-svn. It is possible to have git installed without git-svn installed, so please do verify that you can run $ git svn successfully. For a Debian-based system, the installation of the prerequisites would look like:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ sudo apt-get install git-core git-svn ruby
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Once you have the necessary software on your system, you can install svn2git through rubygems, which will add the svn2git command to your PATH.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ sudo gem install svn2git
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;###Usage
Initial Conversion
编辑author.txt（具体路径待修改）&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ svn log --quiet svn://111.24.73.118/asterisk --username xxx --password xxx  | grep -E &amp;quot;r[0-9]+ \| .+ \|&amp;quot; | cut -d&#39;|&#39; -f2 | sed &#39;s/ //g&#39; | sort | uniq

返回
crm
lfr
ljp
lwq
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;修改author.txt为（具体人不一样）&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;user = user &amp;lt;email@domain.cn&amp;gt;
xxx = xxx &amp;lt;xxx@domain.cn&amp;gt;                                          
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;修改
    修改svn2git的BUG&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ vim /Applications/Xcode.app/Contents/Developer/usr/share/git-core/perl/Git/SVN.pm +106
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;修改&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;     my $u = (::cmt_metadata(&amp;quot;$refname&amp;quot;))[0];                                 
     $u =~ s!^\Q$url\E(/|$)!! or die                                          
       &amp;quot;$refname: &#39;$url&#39; not found in &#39;$u&#39;\n&amp;quot;;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;为&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;      my $u = (::cmt_metadata(&amp;quot;$refname&amp;quot;))[0];                                 
    if(!$u) {                                                                
        $u = $pathname;                                                      
    }else {                                                                  
        $u =~ s!^\Q$url\E(/|$)!! or die                                      
        &amp;quot;$refname: &#39;$url&#39; not found in &#39;$u&#39;\n&amp;quot;;                              
    }  
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;迁移&lt;/p&gt;

&lt;pre&gt;&lt;code&gt; $ svn2git https://192.168.60.200/svn/widisk/ --trunk trunk/widisk --branches branches --tags tags --authors authors.txt --verbose
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;到这步的时候，本地已经clone了SVN仓库，现在需要的就是提交到远程了。首先，关联github远程仓库，如下：&lt;/p&gt;

&lt;p&gt;git remote add origin git@192.168.60.151:lilkr/widisk.git
git push -u origin master
现在所有的旧分支都变成真正的Git 分支，所有的旧标签也变成真正的Git 标签。最后，一项工作就是把新建的Git 服务器添加为远程服务器并且向它推送。为了让所有的分支和标签都得到上传，我们使用这条命令&lt;/p&gt;

&lt;p&gt;git push &amp;ndash;all origin
所有的分支和标签现在都应该整齐干净的躺在新的Git 服务器里了。&lt;/p&gt;

&lt;p&gt;如果有其它问题，参见&lt;a href=&#34;https://github.com/nirvdrum/svn2git&#34;&gt;https://github.com/nirvdrum/svn2git&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>SVN迁移到Git的过程</title>
      <link>http://maintiendrai.github.io/post/2013-10-12-git-svn/</link>
      <pubDate>Sat, 12 Oct 2013 12:09:09 +0800</pubDate>
      
      <guid>http://maintiendrai.github.io/post/2013-10-12-git-svn/</guid>
      <description>&lt;p&gt;###迁移SVN到git
关于在VCS中SVN和Git之间的迁移（Clone）这个部分网上已经有大批的文章介绍，而且都非常不错，能够满足我们的常见的需求，这里介绍的是我自己整理的一些技巧和使用中出现的一些问题和疑问。
阅读本篇文章，请先有一些Git和SVN的使用经验。&lt;/p&gt;

&lt;p&gt;首先需要读取这个软件创建时的版本号&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;svn log https://192.168.60.200/svn/wifidisk|tail -4|head -1
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;得到了如下信息，获得一个版本号 1&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;r1 | plugin-master | 2010-12-03 20:12:29 +0800 (五, 03 12 2010) | 1 line
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;开始clone代码&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;git svn clone https://192.168.60.200/svn/wifidisk -s r1:HEAD wifidisk
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;注：&lt;/strong&gt; -s 参数是表面使用的是svn标准命名方法，即 trunk，tags，branches，这个参数有时很重要，建议使用，命令后面还可以加个文件夹名字作为clone后的目录，如果没有默认是当前路径。
git svn fetch 这个步骤，可能碰到只想从某个版本开始进行fetch，那么请需要 –r 参数。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;注：&lt;/strong&gt; 1 是你想要从这个版本开始fetch，如何查看这个版本号，你可以使用 svn 命令（windows下需要安装Subversion Client，e.g. sliksvn），简单使用就是 svn log svn_url ,这个时候，你可能看到整屏在刷新，没关系，看到log就行。当然更简单的就是使用TortoiseSVN-&amp;gt; Show log。&lt;/p&gt;

&lt;p&gt;到这步的时候，本地已经clone了SVN仓库，现在需要的就是提交到远程了。首先，关联github远程仓库，如下：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;git remote add origin git@192.168.60.151:lilkr/wifidisk.git
git push -u origin master
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;###导入tag跟branch&lt;/p&gt;

&lt;p&gt;你还需要一点post-import（导入后） 清理工作。最起码的，应该清理一下git svn 创
建的那些怪异的索引结构。首先要移动标签，把它们从奇怪的远程分支变成实际的标签，然
后把剩下的分支移动到本地。
要把标签变成合适的Git 标签，运行
将原本以tag/ 开头的远程分支的索引变成真正的（轻巧的）标签。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;cp -Rf .git/refs/remotes/tags/* .git/refs/tags/
rm -Rf .git/refs/remotes/tags
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;把refs/remotes 下面剩下的索引变成本地分支：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;cp -Rf .git/refs/remotes/* .git/refs/heads/
rm -Rf .git/refs/remotes
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;现在所有的旧分支都变成真正的Git 分支，所有的旧标签也变成真正的Git 标签。最后，一项工作就是把新建的Git 服务器添加为远程服务器并且向它推送。为了让所有的分支和标签都得到上传，我们使用这条命令&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;git push origin –all
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;所有的分支和标签现在都应该整齐干净的躺在新的Git 服务器里了。&lt;/p&gt;

&lt;p&gt;资料&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;a href=&#34;http://www.blogjava.net/lishunli/archive/2012/01/15/368562.html&#34;&gt;http://www.blogjava.net/lishunli/archive/2012/01/15/368562.html&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.ooso.net/archives/576&#34;&gt;http://www.ooso.net/archives/576&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
</description>
    </item>
    
  </channel>
</rss>