<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Study on 黑暗民谣</title>
    <link>http://maintiendrai.github.io/categories/study/</link>
    <description>Recent content in Study on 黑暗民谣</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sat, 19 Jan 2019 16:07:09 +0800</lastBuildDate>
    
	<atom:link href="http://maintiendrai.github.io/categories/study/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Rasa NLU天气Bot实现</title>
      <link>http://maintiendrai.github.io/post/2019-01-19-weather-bot/</link>
      <pubDate>Sat, 19 Jan 2019 16:07:09 +0800</pubDate>
      
      <guid>http://maintiendrai.github.io/post/2019-01-19-weather-bot/</guid>
      <description>纯粹是给自己复习看系列 Dependency install pip install -r requirements.txt python -m spacy download en npm i -g rasa-nlu-trainer  Training a Rasa NLU model 手动编辑 mkdir data cd data vi data.json  在线编辑 rasa-nlu-trainer =&amp;gt; localhost:52526
cd .. modify config_spacy.json nlu_model.py
python nlu_model.py =&amp;gt; training
python nlu_model.py =&amp;gt; result
Training a Rasa Core dialogue manangement model create weather_domain.yml
modify actions.py
cd data
modify stroies.md
on line training session cd .. modify train_init.</description>
    </item>
    
    <item>
      <title>Objective-C转向Swift若干tips</title>
      <link>http://maintiendrai.github.io/post/2016-07-26-objective-c%E8%BD%AC%E5%90%91swift%E8%8B%A5%E5%B9%B2tips/</link>
      <pubDate>Tue, 26 Jul 2016 12:09:09 +0800</pubDate>
      
      <guid>http://maintiendrai.github.io/post/2016-07-26-objective-c%E8%BD%AC%E5%90%91swift%E8%8B%A5%E5%B9%B2tips/</guid>
      <description>Objective-C转向Swift若干tips  Swift 的 playground 就像是一个可交互的文档，它是用来练手学swift的，写一句代码出一行结果（右侧），可以实时查看代码结果，是学习swift语言的利器
 不分头文件和实现文件，而是集合到.swift文件
 swift中无需使用代码分隔符，以行作为代码分隔，如一行内有多行代码，则各行代码之间同样需使用分号;分隔
 swift没有main函数，其代码是至上而下运行，第一行代码即为程序入口
 类型对象化（类似于java） Int、Float、Double、Bool、Character
 let 定义常量； len pi = 3.14
 var hello :NSString ?
 var 定义变量var hello :NSString = @“test”
  指定变量类型  ? 表示optional，即该变量可能为nil; 调用时必须加? 如 hello?.length
 ! 表示该变量一定不为nil，否则crash
 @”hello”不存在了,变回了”hello” 如var hello :NSString = &amp;ldquo;hello&amp;rdquo;
  可以使用+来拼接字符串 &amp;ldquo;hello&amp;rdquo;+&amp;ldquo;world&amp;rdquo;
 使用()可以在字符串插入变量 let lang = &amp;ldquo;swift&amp;rdquo;; &amp;ldquo;hello \(lang) world&amp;rdquo;
 class 定义类</description>
    </item>
    
  </channel>
</rss>