<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Svn Git on 黑暗民谣</title>
    <link>http://maintiendrai.github.io/tags/svn-git/</link>
    <description>Recent content in Svn Git on 黑暗民谣</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Tue, 12 May 2015 12:09:09 +0800</lastBuildDate>
    <atom:link href="http://maintiendrai.github.io/tags/svn-git/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>SVN迁移到Git的过程(svn2git)</title>
      <link>http://maintiendrai.github.io/post/2015-05-12-svn-%E5%AE%8C%E7%BE%8E%E8%BF%81%E7%A7%BB%E8%87%B3-git/</link>
      <pubDate>Tue, 12 May 2015 12:09:09 +0800</pubDate>
      
      <guid>http://maintiendrai.github.io/post/2015-05-12-svn-%E5%AE%8C%E7%BE%8E%E8%BF%81%E7%A7%BB%E8%87%B3-git/</guid>
      <description>&lt;p&gt;##SVN完美迁移到Git&lt;/p&gt;

&lt;p&gt;###前言
SVN迁移到GIT，一般我们想到的是《Pro Git》上的git svn命令 它可以把SVN迁移到GIT，它可以支持双向提交，即提交到GIT的同时提交到SVN。但是这个可能是不完美的，因为SVN跟GIT毕竟不是一个东西，组织结构也不一样 github上面推荐svn2git工具。支持完美GIT，但是对SVN的双向commit有所欠缺&lt;/p&gt;

&lt;p&gt;###Installation
Make sure you have git, git-svn, and ruby installed. svn2git is a ruby wrapper around git&amp;rsquo;s native SVN support through git-svn. It is possible to have git installed without git-svn installed, so please do verify that you can run $ git svn successfully. For a Debian-based system, the installation of the prerequisites would look like:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ sudo apt-get install git-core git-svn ruby
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Once you have the necessary software on your system, you can install svn2git through rubygems, which will add the svn2git command to your PATH.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ sudo gem install svn2git
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;###Usage
Initial Conversion
编辑author.txt（具体路径待修改）&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ svn log --quiet svn://111.24.73.118/asterisk --username xxx --password xxx  | grep -E &amp;quot;r[0-9]+ \| .+ \|&amp;quot; | cut -d&#39;|&#39; -f2 | sed &#39;s/ //g&#39; | sort | uniq

返回
crm
lfr
ljp
lwq
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;修改author.txt为（具体人不一样）&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;user = user &amp;lt;email@domain.cn&amp;gt;
xxx = xxx &amp;lt;xxx@domain.cn&amp;gt;                                          
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;修改
    修改svn2git的BUG&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ vim /Applications/Xcode.app/Contents/Developer/usr/share/git-core/perl/Git/SVN.pm +106
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;修改&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;     my $u = (::cmt_metadata(&amp;quot;$refname&amp;quot;))[0];                                 
     $u =~ s!^\Q$url\E(/|$)!! or die                                          
       &amp;quot;$refname: &#39;$url&#39; not found in &#39;$u&#39;\n&amp;quot;;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;为&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;      my $u = (::cmt_metadata(&amp;quot;$refname&amp;quot;))[0];                                 
    if(!$u) {                                                                
        $u = $pathname;                                                      
    }else {                                                                  
        $u =~ s!^\Q$url\E(/|$)!! or die                                      
        &amp;quot;$refname: &#39;$url&#39; not found in &#39;$u&#39;\n&amp;quot;;                              
    }  
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;迁移&lt;/p&gt;

&lt;pre&gt;&lt;code&gt; $ svn2git https://192.168.60.200/svn/widisk/ --trunk trunk/widisk --branches branches --tags tags --authors authors.txt --verbose
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;到这步的时候，本地已经clone了SVN仓库，现在需要的就是提交到远程了。首先，关联github远程仓库，如下：&lt;/p&gt;

&lt;p&gt;git remote add origin git@192.168.60.151:lilkr/widisk.git
git push -u origin master
现在所有的旧分支都变成真正的Git 分支，所有的旧标签也变成真正的Git 标签。最后，一项工作就是把新建的Git 服务器添加为远程服务器并且向它推送。为了让所有的分支和标签都得到上传，我们使用这条命令&lt;/p&gt;

&lt;p&gt;git push &amp;ndash;all origin
所有的分支和标签现在都应该整齐干净的躺在新的Git 服务器里了。&lt;/p&gt;

&lt;p&gt;如果有其它问题，参见&lt;a href=&#34;https://github.com/nirvdrum/svn2git&#34;&gt;https://github.com/nirvdrum/svn2git&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>SVN迁移到Git的过程</title>
      <link>http://maintiendrai.github.io/post/2013-10-12-git-svn/</link>
      <pubDate>Sat, 12 Oct 2013 12:09:09 +0800</pubDate>
      
      <guid>http://maintiendrai.github.io/post/2013-10-12-git-svn/</guid>
      <description>&lt;p&gt;###迁移SVN到git
关于在VCS中SVN和Git之间的迁移（Clone）这个部分网上已经有大批的文章介绍，而且都非常不错，能够满足我们的常见的需求，这里介绍的是我自己整理的一些技巧和使用中出现的一些问题和疑问。
阅读本篇文章，请先有一些Git和SVN的使用经验。&lt;/p&gt;

&lt;p&gt;首先需要读取这个软件创建时的版本号&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;svn log https://192.168.60.200/svn/wifidisk|tail -4|head -1
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;得到了如下信息，获得一个版本号 1&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;r1 | plugin-master | 2010-12-03 20:12:29 +0800 (五, 03 12 2010) | 1 line
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;开始clone代码&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;git svn clone https://192.168.60.200/svn/wifidisk -s r1:HEAD wifidisk
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;注：&lt;/strong&gt; -s 参数是表面使用的是svn标准命名方法，即 trunk，tags，branches，这个参数有时很重要，建议使用，命令后面还可以加个文件夹名字作为clone后的目录，如果没有默认是当前路径。
git svn fetch 这个步骤，可能碰到只想从某个版本开始进行fetch，那么请需要 –r 参数。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;注：&lt;/strong&gt; 1 是你想要从这个版本开始fetch，如何查看这个版本号，你可以使用 svn 命令（windows下需要安装Subversion Client，e.g. sliksvn），简单使用就是 svn log svn_url ,这个时候，你可能看到整屏在刷新，没关系，看到log就行。当然更简单的就是使用TortoiseSVN-&amp;gt; Show log。&lt;/p&gt;

&lt;p&gt;到这步的时候，本地已经clone了SVN仓库，现在需要的就是提交到远程了。首先，关联github远程仓库，如下：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;git remote add origin git@192.168.60.151:lilkr/wifidisk.git
git push -u origin master
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;###导入tag跟branch&lt;/p&gt;

&lt;p&gt;你还需要一点post-import（导入后） 清理工作。最起码的，应该清理一下git svn 创
建的那些怪异的索引结构。首先要移动标签，把它们从奇怪的远程分支变成实际的标签，然
后把剩下的分支移动到本地。
要把标签变成合适的Git 标签，运行
将原本以tag/ 开头的远程分支的索引变成真正的（轻巧的）标签。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;cp -Rf .git/refs/remotes/tags/* .git/refs/tags/
rm -Rf .git/refs/remotes/tags
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;把refs/remotes 下面剩下的索引变成本地分支：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;cp -Rf .git/refs/remotes/* .git/refs/heads/
rm -Rf .git/refs/remotes
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;现在所有的旧分支都变成真正的Git 分支，所有的旧标签也变成真正的Git 标签。最后，一项工作就是把新建的Git 服务器添加为远程服务器并且向它推送。为了让所有的分支和标签都得到上传，我们使用这条命令&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;git push origin –all
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;所有的分支和标签现在都应该整齐干净的躺在新的Git 服务器里了。&lt;/p&gt;

&lt;p&gt;资料&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;a href=&#34;http://www.blogjava.net/lishunli/archive/2012/01/15/368562.html&#34;&gt;http://www.blogjava.net/lishunli/archive/2012/01/15/368562.html&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.ooso.net/archives/576&#34;&gt;http://www.ooso.net/archives/576&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
</description>
    </item>
    
  </channel>
</rss>