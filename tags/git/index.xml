<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Git on My New Hugo Site</title>
    <link>http://maintiendrai.github.io/tags/git/</link>
    <description>Recent content in Git on My New Hugo Site</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Fri, 03 Jul 2015 12:09:09 +0800</lastBuildDate>
    <atom:link href="http://maintiendrai.github.io/tags/git/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>我的Git工作流</title>
      <link>http://maintiendrai.github.io/post/2015-07-03-%E6%88%91%E7%9A%84git%E5%B7%A5%E4%BD%9C%E6%B5%81/</link>
      <pubDate>Fri, 03 Jul 2015 12:09:09 +0800</pubDate>
      
      <guid>http://maintiendrai.github.io/post/2015-07-03-%E6%88%91%E7%9A%84git%E5%B7%A5%E4%BD%9C%E6%B5%81/</guid>
      <description>

&lt;h1 id=&#34;git-data-stores&#34;&gt;Git data stores&lt;/h1&gt;

&lt;p&gt;&lt;img src=&#34;http://ww2.sinaimg.cn/large/637573b1gw1etsbgs5we2j20dd0cnmyl.jpg&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;•   workspace - 对应本地目录，当有文件修改，则最新体现在workspace变化&lt;/p&gt;

&lt;p&gt;•   index - 是索引文件，指定commit要提交的内容&lt;/p&gt;

&lt;p&gt;•   commit - 提交到本地仓库&lt;/p&gt;

&lt;p&gt;•   HEAD - 表示本地最新的一次commit&lt;/p&gt;

&lt;p&gt;•   git diff - 比较workspace与index&lt;/p&gt;

&lt;p&gt;•   git diff -cached - 比较index与commit&lt;/p&gt;

&lt;p&gt;•   git diff HEAD - 比较workspace与commit&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://ww2.sinaimg.cn/large/637573b1gw1etsbhk7uycj20e50huwgq.jpg&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;h1 id=&#34;git-工作流&#34;&gt;Git 工作流&lt;/h1&gt;

&lt;p&gt;master 用于发布&lt;br /&gt;
develop 用户主要开发点&lt;br /&gt;
新功能hotfix，开个功能名的分支，这个分支不 push，写好后:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;(hotfix) $ git add .&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;(hotfix) $ git commit -m &amp;quot;...&amp;quot;&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;(hotfix) $ git checkout develop&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;(develop) $ git pull origin develop&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;(develop) $ git merge hotfix &lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;(develop) $ git push origin develop&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;自己合并到 develop 分支，合并只是简单的 merge 就好了&lt;/p&gt;

&lt;h1 id=&#34;git-rebase&#34;&gt;git rebase&lt;/h1&gt;

&lt;p&gt;两个人工作在一个特性分支上，push 的时候出现冲突，那么要用
git pull
还是
git pull &amp;ndash;rebase
呢？&lt;/p&gt;

&lt;p&gt;以前我是用第一种方式，但是后来偏好
 pull &amp;ndash;rebase，
因为这样可以得到一个线性的特性分支，虽然丢失了并行开发的信息，而且 commit 较多的话解决冲突会变麻烦（解决方案是频繁 rebase &amp;amp;&amp;amp; push）。
保持线性的特性分支，查阅很多资料都只看见“管理者的喜好”这样的描述，而没有描述优缺点。
多人协作，所以需要经常push到代码库备份。而这两个人如果经常 pull 的话，就会出现很多
Merge branch &amp;lsquo;aaa&amp;rsquo; of git.xxx.xxx/xxx/xxx into aaa
这样的 merge commit，这时候就会发现这些merge动作其实没有必要，这些 commit 在审阅代码的时候很干扰。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://ihower.tw/blog/wp-content/uploads/2010/02/git-merge.jpg&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;总结了一下：
加上 rebase 的意思是，
1. 把本地 repo. 从上次 pull 之后的变更暂存起來
2. 回復到上次 pull 時的情況
3. 套用远端的变更
4. 最后再套用刚暂存下来的本地变更。
詳細說明可以參考 [](&lt;a href=&#34;http://gitready.com/advanced/2009/02/11/pull-with-rebase.html&#34;&gt;http://gitready.com/advanced/2009/02/11/pull-with-rebase.html&lt;/a&gt; &amp;ldquo;pull with rebase&amp;rdquo;)。&lt;/p&gt;

&lt;p&gt;用图说明下：&lt;/p&gt;

&lt;p&gt;还没合并前：
&lt;img src=&#34;http://gitbook.liuhui998.com/assets/images/figure/rebase1.png&#34; alt=&#34;&#34; /&gt;
用git merge合并：
&lt;img src=&#34;http://gitbook.liuhui998.com/assets/images/figure/rebase2.png&#34; alt=&#34;&#34; /&gt;
用git rebase合并：
&lt;img src=&#34;http://gitbook.liuhui998.com/assets/images/figure/rebase3.png&#34; alt=&#34;&#34; /&gt;
当&amp;rsquo;mywork&amp;rsquo;分支更新之后，它会指向这些新创建的提交(commit),而那些老的提交会被丢弃。 如果运行垃圾收集命令(pruning garbage collection), 这些被丢弃的提交就会删除.
&lt;img src=&#34;http://gitbook.liuhui998.com/assets/images/figure/rebase4.png&#34; alt=&#34;&#34; /&gt;
最后是：
现在我们可以看一下用合并(merge)和用rebase所产生的历史的区别：
&lt;img src=&#34;http://gitbook.liuhui998.com/assets/images/figure/rebase5.png&#34; alt=&#34;&#34; /&gt;
(rebase 时所谓的解决冲突，其实是直接修改你之前的变更內容，所以上图中变成 C5’ 跟 c6’ )&lt;/p&gt;

&lt;p&gt;在rebase的过程中，也许会出现冲突(conflict). 在这种情况，Git会停止rebase并会让你去解决 冲突；在解决完冲突后，用&amp;rdquo;git-add&amp;rdquo;命令去更新这些内容的索引(index), 然后，你无需执行 git-commit,只要执行:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;$ git rebase --continue&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;这样git会继续应用(apply)余下的补丁。
在任何时候，你可以用&amp;ndash;abort参数来终止rebase的行动，并且&amp;rdquo;mywork&amp;rdquo; 分支会回到rebase开始前的状态。&lt;/p&gt;

&lt;p&gt;&lt;code&gt;$ git rebase --abort&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;参考资料:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;a href=&#34;http://blog.osteele.com/posts/2008/05/my-git-workflow/#fn:1&#34;&gt;http://blog.osteele.com/posts/2008/05/my-git-workflow/#fn:1&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://gitbook.liuhui998.com/4_2.html&#34;&gt;http://gitbook.liuhui998.com/4_2.html&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://ihower.tw/blog/archives/3843&#34;&gt;https://ihower.tw/blog/archives/3843&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://getpocket.com/a/read/961298276&#34;&gt;https://getpocket.com/a/read/961298276&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.oschina.net/question/54371_59134&#34;&gt;http://www.oschina.net/question/54371_59134&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.nvie.com/posts/a-successful-git-branching-model/&#34;&gt;http://www.nvie.com/posts/a-successful-git-branching-model/&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
</description>
    </item>
    
    <item>
      <title>Hello</title>
      <link>http://maintiendrai.github.io/post/2013-09-25-hello/</link>
      <pubDate>Wed, 25 Sep 2013 12:09:09 +0800</pubDate>
      
      <guid>http://maintiendrai.github.io/post/2013-09-25-hello/</guid>
      <description>&lt;p&gt;ii
Hello&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>