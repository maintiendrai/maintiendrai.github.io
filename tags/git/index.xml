<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>git on 黑暗民谣</title>
    <link>http://maintiendrai.github.io/tags/git/</link>
    <description>Recent content in git on 黑暗民谣</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Fri, 03 Jul 2015 12:09:09 +0800</lastBuildDate><atom:link href="http://maintiendrai.github.io/tags/git/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>我的Git工作流</title>
      <link>http://maintiendrai.github.io/post/2015-07-03-%E6%88%91%E7%9A%84git%E5%B7%A5%E4%BD%9C%E6%B5%81/</link>
      <pubDate>Fri, 03 Jul 2015 12:09:09 +0800</pubDate>
      
      <guid>http://maintiendrai.github.io/post/2015-07-03-%E6%88%91%E7%9A%84git%E5%B7%A5%E4%BD%9C%E6%B5%81/</guid>
      <description>Git data stores •	workspace - 对应本地目录，当有文件修改，则最新体现在workspace变化
•	index - 是索引文件，指定commit要提交的内容
•	commit - 提交到本地仓库
•	HEAD - 表示本地最新的一次commit
•	git diff - 比较workspace与index
•	git diff -cached - 比较index与commit
•	git diff HEAD - 比较workspace与commit
Git 工作流 master 用于发布
develop 用户主要开发点
新功能hotfix，开个功能名的分支，这个分支不 push，写好后:
(hotfix) $ git add .
(hotfix) $ git commit -m &amp;quot;...&amp;quot;
(hotfix) $ git checkout develop
(develop) $ git pull origin develop
(develop) $ git merge hotfix (develop) $ git push origin develop</description>
    </item>
    
    <item>
      <title>SVN迁移到Git的过程(svn2git)</title>
      <link>http://maintiendrai.github.io/post/2015-05-12-svn-%E5%AE%8C%E7%BE%8E%E8%BF%81%E7%A7%BB%E8%87%B3-git/</link>
      <pubDate>Tue, 12 May 2015 12:09:09 +0800</pubDate>
      
      <guid>http://maintiendrai.github.io/post/2015-05-12-svn-%E5%AE%8C%E7%BE%8E%E8%BF%81%E7%A7%BB%E8%87%B3-git/</guid>
      <description>##SVN完美迁移到Git
###前言 SVN迁移到GIT，一般我们想到的是《Pro Git》上的git svn命令 它可以把SVN迁移到GIT，它可以支持双向提交，即提交到GIT的同时提交到SVN。但是这个可能是不完美的，因为SVN跟GIT毕竟不是一个东西，组织结构也不一样 github上面推荐svn2git工具。支持完美GIT，但是对SVN的双向commit有所欠缺
###Installation Make sure you have git, git-svn, and ruby installed. svn2git is a ruby wrapper around git&amp;rsquo;s native SVN support through git-svn. It is possible to have git installed without git-svn installed, so please do verify that you can run $ git svn successfully. For a Debian-based system, the installation of the prerequisites would look like:
$ sudo apt-get install git-core git-svn ruby Once you have the necessary software on your system, you can install svn2git through rubygems, which will add the svn2git command to your PATH.</description>
    </item>
    
    <item>
      <title>群晖DSM上安装Git Server</title>
      <link>http://maintiendrai.github.io/post/2014-07-01-syn-dsm-git-server/</link>
      <pubDate>Tue, 01 Jul 2014 12:09:09 +0800</pubDate>
      
      <guid>http://maintiendrai.github.io/post/2014-07-01-syn-dsm-git-server/</guid>
      <description>给WD、TOSHIBA开发的无线硬盘APP，也给自己公司开发的WiDiSK无线硬盘APP。都是基于WebDAV的。想知道别人的NAS的APP做的怎么样本来想用旧台式机装黑群晖，但是考虑到功率的问题，我还是选择了群晖的 nas 解决方案以及附带的 DSM 系统。并在手机上装APP进行体验。
群晖 nas 的系统 DSM 是基于 Linux 的，因此你也可以把 nas 看作一台小型的 Linux 服务器。DSM 提供了很多实用的套件供你开发 nas 的潜力，包括 PHP、Python、MySQL、Wordpress 等，同时也支持 Git 服务器。
今天这篇文章就讲讲如何使用群晖 nas 搭建私有 git 服务器。
###为什么要搭建私有 git 服务器
这个不多说了，不想搭就不用来看这文章了 以前用gitlab在ubuntu上搭过git服务器。
###nas 搭建 git 服务器
进入 DSM 系统的『套件中心』，安装 Git Server
创建一名用户，名为『git』（名称随意，但是叫 git 比较好，该用户仅有 git shell 的执行权限，除此之外无任何权限）在用户界面创建新用户git，没有特殊权限，放到users组即可
在『控制面板』- 『终端机』中开启 SSH 登录功能
用ssh的root用户登录到群晖
vi /etc/passwd 文件 修改git用户的home目录
/var/services/homes/git to /volume1/git 修改登录后的 shell
/sbin/nologin to /bin/ash 修改git用户home目录的权限为777
chmod 777 /volume1/git/ 再在/volume1/git/创建一个.ssh文件夹,还是权限777</description>
    </item>
    
    <item>
      <title>SVN迁移到Git的过程</title>
      <link>http://maintiendrai.github.io/post/2013-10-12-git-svn/</link>
      <pubDate>Sat, 12 Oct 2013 12:09:09 +0800</pubDate>
      
      <guid>http://maintiendrai.github.io/post/2013-10-12-git-svn/</guid>
      <description>###迁移SVN到git 关于在VCS中SVN和Git之间的迁移（Clone）这个部分网上已经有大批的文章介绍，而且都非常不错，能够满足我们的常见的需求，这里介绍的是我自己整理的一些技巧和使用中出现的一些问题和疑问。 阅读本篇文章，请先有一些Git和SVN的使用经验。
首先需要读取这个软件创建时的版本号
svn log https://192.168.60.200/svn/wifidisk|tail -4|head -1 得到了如下信息，获得一个版本号 1
r1 | plugin-master | 2010-12-03 20:12:29 +0800 (五, 03 12 2010) | 1 line 开始clone代码
git svn clone https://192.168.60.200/svn/wifidisk -s r1:HEAD wifidisk 注： -s 参数是表面使用的是svn标准命名方法，即 trunk，tags，branches，这个参数有时很重要，建议使用，命令后面还可以加个文件夹名字作为clone后的目录，如果没有默认是当前路径。 git svn fetch 这个步骤，可能碰到只想从某个版本开始进行fetch，那么请需要 –r 参数。
注： 1 是你想要从这个版本开始fetch，如何查看这个版本号，你可以使用 svn 命令（windows下需要安装Subversion Client，e.g. sliksvn），简单使用就是 svn log svn_url ,这个时候，你可能看到整屏在刷新，没关系，看到log就行。当然更简单的就是使用TortoiseSVN-&amp;gt; Show log。
到这步的时候，本地已经clone了SVN仓库，现在需要的就是提交到远程了。首先，关联github远程仓库，如下：
git remote add origin git@192.168.60.151:lilkr/wifidisk.git git push -u origin master ###导入tag跟branch
你还需要一点post-import（导入后） 清理工作。最起码的，应该清理一下git svn 创 建的那些怪异的索引结构。首先要移动标签，把它们从奇怪的远程分支变成实际的标签，然 后把剩下的分支移动到本地。 要把标签变成合适的Git 标签，运行 将原本以tag/ 开头的远程分支的索引变成真正的（轻巧的）标签。</description>
    </item>
    
    <item>
      <title>Hello</title>
      <link>http://maintiendrai.github.io/post/2013-09-25-hello/</link>
      <pubDate>Wed, 25 Sep 2013 12:09:09 +0800</pubDate>
      
      <guid>http://maintiendrai.github.io/post/2013-09-25-hello/</guid>
      <description>Hello</description>
    </item>
    
  </channel>
</rss>
